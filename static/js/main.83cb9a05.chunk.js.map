{"version":3,"sources":["shared/digits.js","components/Display.js","components/CalculatorMain.js","App.js","reportWebVitals.js","index.js"],"names":["DIGITS","i","push","renderDigits","Display","props","className","style","fontSize","setCalc","result","input","Calculator","state","digits","operator","addStylesActive","subtractStylesActive","multiplyStylesActive","divideStylesActive","updateCalc","value","length","setState","resetCalc","handleOperator","solve","calculation","solution","parseFloat","toString","slice","this","onClick","map","a","borderBottomLeftRadius","includes","borderBottomRightRadius","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAAaA,EAAS,IAED,WACjB,IAAI,IAAIC,EAAE,EAAGA,EAAE,GAAIA,IACfD,EAAOE,KAAKD,GAIpBE,G,WCNe,SAASC,EAAQC,GAE5B,OACI,qBAAKC,UAAU,0BAAf,SACI,sBAAMC,MAAO,CAACC,SAAU,IAAxB,SACKH,EAAMI,SAAWJ,EAAMK,QAAUL,EAAMM,OAAS,Q,ICF5CC,E,kDAEjB,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CACTC,OAAQd,EACRW,MAAO,GACPI,SAAU,GACVC,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,EACtBC,oBAAoB,EACpBV,QAAS,GACTC,OAAQ,IAXG,E,0CAenB,WAAU,IAAD,OAGCU,EAAa,SAACC,GACU,MAAvB,EAAKR,MAAMJ,SAAiD,IAA9B,EAAKI,MAAMJ,QAAQa,OAChD,EAAKC,SAAS,CACVd,QAAS,EAAKI,MAAMJ,UAGxB,EAAKc,SAAS,CACVd,QAAS,EAAKI,MAAMJ,QAAUY,KAKpCG,EAAY,WACd,EAAKD,SAAS,CACVZ,MAAO,GACPI,SAAU,GACVC,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,EACtBC,oBAAoB,EACpBV,QAAS,GACTC,OAAQ,MAsBVe,EAAiB,SAACJ,GAsBpB,OArB0B,MAAvB,EAAKR,MAAMJ,QACVe,IAEA,EAAKD,SAAS,CACVZ,OAAQ,EAAKE,MAAMJ,SAAW,EAAKI,MAAMH,OAAS,EAAKG,MAAMH,OACnD,EAAKG,MAAMF,OAAS,EAAKE,MAAME,SAAW,EAAKF,MAAMF,MACpD,EAAKE,MAAMJ,SAAY,EAAKI,MAAMH,OACnC,EAAKG,MAAMJ,QADiC,IAEtDM,SAAUM,EACVZ,QAAS,KAId,EAAKI,MAAME,UAAY,EAAKF,MAAMF,OAAS,EAAKE,MAAMJ,UACrDiB,EAAM,EAAKb,MAAME,UACjB,EAAKQ,SAAS,CACVR,SAAUM,EACVZ,QAAS,MAIVY,GACH,IAAK,IACD,EAAKE,SAAS,CACVP,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,EACtBC,oBAAoB,IAExB,MAEJ,IAAK,IACD,EAAKI,SAAS,CACVP,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,EACtBC,oBAAoB,IAExB,MAEJ,IAAK,IACD,EAAKI,SAAS,CACVP,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,EACtBC,oBAAoB,IAExB,MAEJ,IAAK,IACD,EAAKI,SAAS,CACVP,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,EACtBC,oBAAoB,MAM9BO,EAAQ,SAACX,GAEX,IAAIY,EACAC,EAEJ,OAAOb,GACH,IAAK,IACDY,EAAcE,WAAW,EAAKhB,MAAMF,OAASkB,WAAW,EAAKhB,MAAMJ,SACnE,MAEJ,IAAK,IACDkB,EAAcE,WAAW,EAAKhB,MAAMF,OAASkB,WAAW,EAAKhB,MAAMJ,SACnE,MAEJ,IAAK,IACDkB,EAAcE,WAAW,EAAKhB,MAAMF,OAASkB,WAAW,EAAKhB,MAAMJ,SACnE,MAEJ,IAAK,IACDkB,EAAcE,WAAW,EAAKhB,MAAMF,OAASkB,WAAW,EAAKhB,MAAMJ,SAK/BmB,EAD3C,EAAKf,MAAMF,OAAU,EAAKE,MAAMJ,QAC/B,EAAKI,MAAMF,QAAU,EAAKE,MAAMJ,QAAqB,EAAKI,MAAMF,OAC/D,EAAKE,MAAMF,OAAS,EAAKE,MAAMJ,QAAqB,EAAKI,MAAMJ,QACrDkB,EAAYG,WAAWC,MAAM,EAAE,GAHU,EAKnDJ,EAAc,UACb,EAAKJ,SAAS,CACVZ,MAAO,GACPI,SAAU,GACVN,QAAS,IACTO,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,EACtBC,oBAAoB,EACpBT,OAAQ,MAGZ,EAAKa,SAAS,CACVZ,MAAOiB,EACPb,SAAU,GACVN,QAAS,GACTO,iBAAiB,EACjBC,sBAAsB,EACtBC,sBAAsB,EACtBC,oBAAoB,EACpBT,OAAQkB,KAMpB,OACI,sBAAKtB,UAAU,kBAAf,UACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,4BAAf,SACI,sDAGR,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,0CAAf,SACI,sBAAKA,UAAU,oBAAf,UACI,qBAAKA,UAAU,MAAf,SACI,cAACF,EAAD,CAASK,QAASuB,KAAKnB,MAAMJ,QAASC,OAAQsB,KAAKnB,MAAMH,OAAQC,MAAOqB,KAAKnB,MAAMF,UAEvF,qBAAKL,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACI,cAAC,IAAD,CACIA,UAAS,+BAA0B0B,KAAKnB,MAAMG,gBAAkB,SAAW,IAC3EK,MAAM,IACNY,QAAS,kBAAMR,EAAe,MAHlC,eAMA,cAAC,IAAD,CACInB,UAAS,+BAA0B0B,KAAKnB,MAAMI,qBAAuB,SAAW,IAChFI,MAAM,IACNY,QAAS,kBAAMR,EAAe,MAHlC,eAMA,cAAC,IAAD,CACInB,UAAS,+BAA0B0B,KAAKnB,MAAMK,qBAAuB,SAAW,IAChFG,MAAM,IACNY,QAAS,kBAAMR,EAAe,MAHlC,eAMA,cAAC,IAAD,CACInB,UAAS,+BAA0B0B,KAAKnB,MAAMM,mBAAqB,SAAW,IAC9EE,MAAM,IACNY,QAAS,kBAAMR,EAAe,MAHlC,eAMA,cAAC,IAAD,CACInB,UAAU,wBACVe,MAAM,IACNY,QAAS,kBAAMT,KAHnB,oBAQR,qBAAKlB,UAAU,MAAf,SACI,sBAAKA,UAAU,SAAf,UACK0B,KAAKnB,MAAMC,OAAOoB,KAAI,SAAAC,GAAC,OAAI,cAAC,IAAD,CAAQ7B,UAAU,eAAuBe,MAAOc,EAAGF,QAAS,kBAAMb,EAAWe,EAAEL,aAA/E,SAA6FK,GAAvDA,MAClE,cAAC,IAAD,CAAQ7B,UAAU,eAAeC,MAAO,CAAC6B,uBAAwB,QAASf,MAAM,IAAIY,QAAS,kBAAMb,EAAW,MAA9G,eACA,cAAC,IAAD,CAAQd,UAAU,eAAee,MAAM,IAAIY,QAAS,kBAhLxDZ,EAgL6E,SA/K9F,EAAKR,MAAMJ,QAAQ4B,SAAS,MAAkB,MAAVhB,GAE7B,EAAKR,MAAMJ,SAAqB,MAAVY,GAG5BD,EAAWC,IANI,IAACA,GAgLI,eACA,cAAC,IAAD,CAAQf,UAAU,eAAee,MAAM,IAAIY,QAAS,kBAzLzDZ,EAyL6E,SAxL7F,EAAKR,MAAMJ,QAAQ4B,SAAS,MAAkB,MAAVhB,GAGnCD,EAAWC,IAJG,IAACA,GAyLK,eACA,cAAC,IAAD,CAAQf,UAAU,wBAAwBC,MAAO,CAAC+B,wBAAyB,QAASjB,MAAM,IAAIY,QAAS,kBAAMP,EAAM,EAAKb,MAAME,WAA9H,kC,GAvOIwB,aCIzBC,MAJf,WACE,OAAO,cAAC,EAAD,KCMMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.83cb9a05.chunk.js","sourcesContent":["export const DIGITS = [];\n\nconst renderDigits = () => {\n    for(let i=1; i<10; i++) {\n        DIGITS.push(i);\n    }\n}\n\nrenderDigits();","import React from 'react';\n\nexport default function Display(props) {\n\n    return(\n        <div className=\"col display text-center\">\n            <span style={{fontSize: 40}}>\n                {props.setCalc || props.result || props.input || '0'}\n            </span>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport { DIGITS } from '../shared/digits';\nimport Display from './Display';\n\nexport default class Calculator extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            digits: DIGITS,\n            input: '',\n            operator: '',\n            addStylesActive: false,\n            subtractStylesActive: false,\n            multiplyStylesActive: false,\n            divideStylesActive: false,\n            setCalc: '',\n            result: ''\n        }   \n    }\n    \n    render() {\n\n\n        const updateCalc = (value) => {\n            if(this.state.setCalc === 'E' || this.state.setCalc.length === 9) {\n                this.setState({\n                    setCalc: this.state.setCalc\n                })\n            } else {\n                this.setState({\n                    setCalc: this.state.setCalc + value\n                });\n            }\n        }\n\n        const resetCalc = () => {\n            this.setState({\n                input: '',\n                operator: '',\n                addStylesActive: false,\n                subtractStylesActive: false,\n                multiplyStylesActive: false,\n                divideStylesActive: false,\n                setCalc: '',\n                result: ''\n            });\n        }\n\n        const handleDecimal = (value) => {\n            if(this.state.setCalc.includes('.') && value === '.') {\n                return;\n            } else {\n                updateCalc(value);\n            }\n        }\n\n        const handleNegative = (value) => {\n            if(this.state.setCalc.includes('-') && value === '-') {\n                return;\n            } else if(this.state.setCalc && value === '-') {\n                return;\n            } else {\n                updateCalc(value);\n            }\n        }\n\n        const handleOperator = (value) => {\n            if(this.state.setCalc === 'E') {\n                resetCalc();\n            } else {\n                this.setState({\n                    input: !this.state.setCalc && this.state.result ? this.state.result \n                            : this.state.input && this.state.operator ? this.state.input\n                            : !this.state.setCalc && !this.state.result ? '0'\n                            : this.state.setCalc,\n                    operator: value,\n                    setCalc: ''\n                });\n            }\n\n            if(this.state.operator && this.state.input && this.state.setCalc) {\n                solve(this.state.operator);\n                this.setState({\n                    operator: value,\n                    setCalc: ''\n                });\n            } \n\n            switch(value) {\n                case '+':\n                    this.setState({\n                        addStylesActive: true,\n                        subtractStylesActive: false,\n                        multiplyStylesActive: false,\n                        divideStylesActive: false,\n                    })\n                    break;\n\n                case '-':\n                    this.setState({\n                        addStylesActive: false,\n                        subtractStylesActive: true,\n                        multiplyStylesActive: false,\n                        divideStylesActive: false,\n                    })\n                    break;\n\n                case '*':\n                    this.setState({\n                        addStylesActive: false,\n                        subtractStylesActive: false,\n                        multiplyStylesActive: true,\n                        divideStylesActive: false,\n                    })\n                    break;\n                \n                case '/':\n                    this.setState({\n                        addStylesActive: false,\n                        subtractStylesActive: false,\n                        multiplyStylesActive: false,\n                        divideStylesActive: true,\n                    })\n                    break;\n            }\n        }\n\n        const solve = (operator) => {\n\n            let calculation;\n            let solution;\n\n            switch(operator) {\n                case '+':\n                    calculation = parseFloat(this.state.input) + parseFloat(this.state.setCalc);\n                    break;\n\n                case '-':\n                    calculation = parseFloat(this.state.input) - parseFloat(this.state.setCalc);\n                    break;\n\n                case '*':\n                    calculation = parseFloat(this.state.input) * parseFloat(this.state.setCalc);\n                    break;\n\n                case '/':\n                    calculation = parseFloat(this.state.input) / parseFloat(this.state.setCalc);\n                    break;\n            }\n            \n            !this.state.input && !this.state.setCalc ? solution = 0\n            : this.state.input && !this.state.setCalc ? solution = this.state.input\n            : !this.state.input && this.state.setCalc ? solution = this.state.setCalc\n            : solution = calculation.toString().slice(0,9);\n\n            if(calculation > 999999999) {\n                this.setState({\n                    input: '',\n                    operator: '',\n                    setCalc: 'E',\n                    addStylesActive: false,\n                    subtractStylesActive: false,\n                    multiplyStylesActive: false,\n                    divideStylesActive: false,\n                    result: 'E'\n                });\n            } else {\n                this.setState({\n                    input: solution,\n                    operator: '',\n                    setCalc: '',\n                    addStylesActive: false,\n                    subtractStylesActive: false,\n                    multiplyStylesActive: false,\n                    divideStylesActive: false,\n                    result: solution\n                });\n            }\n        }\n\n\n        return (\n            <div className='container-fluid'>\n                <div className='row'>\n                    <div className='col pt-5 pb-5 text-center'>\n                        <h1>React Calculator</h1>\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-9 col-sm-6 col-lg-4 calculatorFrame'>\n                        <div className='container m-0 p-0'>\n                            <div className='row'>\n                                <Display setCalc={this.state.setCalc} result={this.state.result} input={this.state.input} />\n                            </div>\n                            <div className='row'>\n                                <div className='operators'>\n                                    <Button\n                                        className={`col-2 button operator${this.state.addStylesActive ? 'Active' : ''}`}\n                                        value=\"+\" \n                                        onClick={() => handleOperator(\"+\")}>\n                                        +\n                                    </Button>\n                                    <Button\n                                        className={`col-2 button operator${this.state.subtractStylesActive ? 'Active' : ''}`}\n                                        value=\"-\"\n                                        onClick={() => handleOperator(\"-\")}>\n                                        -\n                                    </Button>\n                                    <Button\n                                        className={`col-2 button operator${this.state.multiplyStylesActive ? 'Active' : ''}`}\n                                        value=\"*\"\n                                        onClick={() => handleOperator(\"*\")}>\n                                        *\n                                    </Button>\n                                    <Button\n                                        className={`col-2 button operator${this.state.divideStylesActive ? 'Active' : ''}`}\n                                        value=\"/\"\n                                        onClick={() => handleOperator(\"/\")}>\n                                        /\n                                    </Button>\n                                    <Button\n                                        className='col-4 button operator'\n                                        value='='\n                                        onClick={() => resetCalc()}>\n                                        C\n                                    </Button>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"digits\">\n                                    {this.state.digits.map(a => <Button className='col-4 button' key={a} value={a} onClick={() => updateCalc(a.toString())}>{a}</Button>)}\n                                    <Button className='col-4 button' style={{borderBottomLeftRadius: '10px'}} value='0' onClick={() => updateCalc('0')}>0</Button>\n                                    <Button className='col-2 button' value='-' onClick={() => handleNegative('-')}>-</Button>\n                                    <Button className='col-2 button' value='.' onClick={() => handleDecimal('.')}>.</Button>\n                                    <Button className='col-4 button operator' style={{borderBottomRightRadius: '10px'}} value='=' onClick={() => solve(this.state.operator)}>=</Button>\n                                </div>\n                            </div>\n                        </div>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Calculator from './components/CalculatorMain';\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}